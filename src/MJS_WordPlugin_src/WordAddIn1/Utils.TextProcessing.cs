using System.Collections.Generic;
using System.Text;

namespace WordAddIn1
{
    internal partial class Utils
    {
        // 全角文字を半角文字に変換するメソッド
        
        internal static string ConvertWideToNarrow(string input)
        {
            // nullまたは空文字列の場合は早期リターン
            if (string.IsNullOrEmpty(input))
                return input;

            // 変換結果格納用のStringBuilderを初期化（入力文字列長で容量を事前確保）
            var result = new StringBuilder(input.Length);

            // 入力文字列の各文字を順次処理
            foreach (char c in input)
            {
                // 文字を文字列に変換（辞書のキーとして使用するため）
                string charStr = c.ToString();

                // 変換辞書から対応する半角文字を検索
                if (WideToNarrowMap.TryGetValue(charStr, out string narrowChar))
                {
                    // 変換対象の文字の場合：半角文字を追加
                    result.Append(narrowChar);
                }
                else
                {
                    // 変換対象外の文字の場合：元の文字をそのまま追加
                    result.Append(c);
                }
            }

            // 変換完了した文字列を返す
            return result.ToString();
        }

        // 全角→半角変換用の辞書
        private static readonly Dictionary<string, string> WideToNarrowMap = new Dictionary<string, string>
        {
            // 数字
            {"０", "0"}, {"１", "1"}, {"２", "2"}, {"３", "3"}, {"４", "4"},
            {"５", "5"}, {"６", "6"}, {"７", "7"}, {"８", "8"}, {"９", "9"},
    
            // 英字（大文字）
            {"Ａ", "a"}, {"Ｂ", "b"}, {"Ｃ", "c"}, {"Ｄ", "d"}, {"Ｅ", "e"},
            {"Ｆ", "f"}, {"Ｇ", "g"}, {"Ｈ", "h"}, {"Ｉ", "i"}, {"Ｊ", "j"},
            {"Ｋ", "k"}, {"Ｌ", "l"}, {"Ｍ", "m"}, {"Ｎ", "n"}, {"Ｏ", "o"},
            {"Ｐ", "p"}, {"Ｑ", "q"}, {"Ｒ", "r"}, {"Ｓ", "s"}, {"Ｔ", "t"},
            {"Ｕ", "u"}, {"Ｖ", "v"}, {"Ｗ", "w"}, {"Ｘ", "x"}, {"Ｙ", "y"}, {"Ｚ", "z"},
    
            // 英字（小文字）
            {"ａ", "a"}, {"ｂ", "b"}, {"ｃ", "c"}, {"ｄ", "d"}, {"ｅ", "e"},
            {"ｆ", "f"}, {"ｇ", "g"}, {"ｈ", "h"}, {"ｉ", "i"}, {"ｊ", "j"},
            {"ｋ", "k"}, {"ｌ", "l"}, {"ｍ", "m"}, {"ｎ", "n"}, {"ｏ", "o"},
            {"ｐ", "p"}, {"ｑ", "q"}, {"ｒ", "r"}, {"ｓ", "s"}, {"ｔ", "t"},
            {"ｕ", "u"}, {"ｖ", "v"}, {"ｗ", "w"}, {"ｘ", "x"}, {"ｙ", "y"}, {"ｚ", "z"},
    
            // カタカナ（濁音）
            {"ガ", "ｶﾞ"}, {"ギ", "ｷﾞ"}, {"グ", "ｸﾞ"}, {"ゲ", "ｹﾞ"}, {"ゴ", "ｺﾞ"},
            {"ザ", "ｻﾞ"}, {"ジ", "ｼﾞ"}, {"ズ", "ﾂﾞ"}, {"ゼ", "ｾﾞ"}, {"ゾ", "ｿﾞ"},
            {"ダ", "ﾀﾞ"}, {"ヂ", "ﾁﾞ"}, {"ヅ", "ﾂﾞ"}, {"デ", "ﾃﾞ"}, {"ド", "ﾄﾞ"},
            {"バ", "ﾊﾞ"}, {"ビ", "ﾋﾞ"}, {"ブ", "ﾌﾞ"}, {"ベ", "ﾍﾞ"}, {"ボ", "ﾎﾞ"},
    
            // カタカナ（半濁音）
            {"パ", "ﾊﾟ"}, {"ピ", "ﾋﾟ"}, {"プ", "ﾌﾟ"}, {"ペ", "ﾍﾟ"}, {"ポ", "ﾎﾟ"},
    
            // 記号
            {"。", "｡"}, {"「", "｢"}, {"」", "｣"}, {"、", "､"},
    
            // カタカナ（清音・小文字）
            {"ヲ", "ｦ"}, {"ァ", "ｧ"}, {"ィ", "ｨ"}, {"ゥ", "ｩ"}, {"ェ", "ｪ"},
            {"ォ", "ｫ"}, {"ャ", "ｬ"}, {"ュ", "ｭ"}, {"ョ", "ｮ"}, {"ッ", "ｯ"}, {"ー", "ｰ"},
    
            // カタカナ（清音）
            {"ア", "ｱ"}, {"イ", "ｲ"}, {"ウ", "ｳ"}, {"エ", "ｴ"}, {"オ", "ｵ"},
            {"カ", "ｶ"}, {"キ", "ｷ"}, {"ク", "ｸ"}, {"ケ", "ｹ"}, {"コ", "ｺ"},
            {"サ", "ｻ"}, {"シ", "ｼ"}, {"ス", "ｽ"}, {"セ", "ｾ"}, {"ソ", "ｿ"},
            {"タ", "ﾀ"}, {"チ", "ﾁ"}, {"ツ", "ﾂ"}, {"テ", "ﾃ"}, {"ト", "ﾄ"},
            {"ナ", "ﾅ"}, {"ニ", "ﾆ"}, {"ヌ", "ﾇ"}, {"ネ", "ﾈ"}, {"ノ", "ﾉ"},
            {"ハ", "ﾊ"}, {"ヒ", "ﾋ"}, {"フ", "ﾌ"}, {"ヘ", "ﾍ"}, {"ホ", "ﾎ"},
            {"マ", "ﾏ"}, {"ミ", "ﾐ"}, {"ム", "ﾑ"}, {"メ", "ﾒ"}, {"モ", "ﾓ"},
            {"ヤ", "ﾔ"}, {"ユ", "ﾕ"}, {"ヨ", "ﾖ"},
            {"ラ", "ﾗ"}, {"リ", "ﾘ"}, {"ル", "ﾙ"}, {"レ", "ﾚ"}, {"ロ", "ﾛ"},
            {"ワ", "ﾜ"}, {"ン", "ﾝ"}
        };

        /// <summary>
        /// 改行文字を\nに統一するメソッド
        /// </summary>
        /// <param name="input">入力文字列</param>
        /// <returns>改行文字が統一された文字列</returns>
        internal static string NormalizeLineEndings(string input)
        {
            if (string.IsNullOrEmpty(input))
                return input;

            // \r\nを\nに変換し、単独の\rも\nに変換
            return input.Replace("\r\n", "\n").Replace("\r", "\n");
        }
    }
}
