using System.Collections.Generic;

namespace WordAddIn1
{
    public partial class RibbonMJS
    {
        private static string BuildHtmlTemplate1(Dictionary<string, string[]> title4Collection, Dictionary<string, string> mergeScript)
        {
            string htmlTemplate1 = "";
            htmlTemplate1 += @"<!DOCTYPE HTML>" + "\n";
            htmlTemplate1 += @"<html>" + "\n";
            htmlTemplate1 += @"<head>" + "\n";
            htmlTemplate1 += @"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />" + "\n";
            htmlTemplate1 += @"<meta name=""generator"" content=""Adobe RoboHelp 2017"" />" + "\n";
            htmlTemplate1 += @"<title></title>" + "\n";
            htmlTemplate1 += @"<link rel=""StyleSheet"" href=""MJSHELP2002.css"" type=""text/css"" />" + "\n";
            htmlTemplate1 += @"<link rel=""StyleSheet"" href=""font.css"" type=""text/css"" />" + "\n";
            htmlTemplate1 += @"<link rel=""StyleSheet"" href=""resp.css"" type=""text/css"" />" + "\n";
            htmlTemplate1 += @"<style type=""text/css"">" + "\n";
            htmlTemplate1 += @"<!--" + "\n";
            htmlTemplate1 += @"A:visited { color:purple; }" + "\n";
            htmlTemplate1 += @"A:link { color:#337AB7; }" + "\n";
            htmlTemplate1 += @"-->" + "\n";
            htmlTemplate1 += @"</style>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" language=""JavaScript"">" + "\n";
            htmlTemplate1 += @"//<![CDATA[" + "\n";
            htmlTemplate1 += @"function reDo() {" + "\n";
            htmlTemplate1 += @"  if (innerWidth != origWidth || innerHeight != origHeight)" + "\n";
            htmlTemplate1 += @"     location.reload();" + "\n";
            htmlTemplate1 += @"}" + "\n";
            htmlTemplate1 += @"if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == ""Netscape"")) {" + "\n";
            htmlTemplate1 += @"   origWidth = innerWidth;" + "\n";
            htmlTemplate1 += @"   origHeight = innerHeight;" + "\n";
            htmlTemplate1 += @"   onresize = reDo;" + "\n";
            htmlTemplate1 += @"}" + "\n";
            htmlTemplate1 += @"onerror = null; " + "\n";
            htmlTemplate1 += @"//]]>" + "\n";
            htmlTemplate1 += @"</script>" + "\n";
            htmlTemplate1 += @"<style type=""text/css"">" + "\n";
            htmlTemplate1 += @"<!--" + "\n";
            htmlTemplate1 += @"div.WebHelpPopupMenu { position:absolute;" + "\n";
            htmlTemplate1 += @"left:0px;" + "\n";
            htmlTemplate1 += @"top:0px;" + "\n";
            htmlTemplate1 += @"z-index:4;" + "\n";
            htmlTemplate1 += @"visibility:hidden; }" + "\n";
            htmlTemplate1 += @"p.WebHelpNavBar { text-align:right; }" + "\n";
            htmlTemplate1 += @"-->" + "\n";
            htmlTemplate1 += @"</style>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/rh.min.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/common.min.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/topic.min.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/constants.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/utils.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/mhutils.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/mhlang.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/mhver.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/settings.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/XmlJsReader.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/loadparentdata.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/loadscreen.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/loadprojdata.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/mhtopic.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/jquery-3.1.0.min.js""></script>" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" src=""template/scripts/resp.js""></script>" + "\n";
            htmlTemplate1 += @" <link rel=""stylesheet"" type=""text/css"" href=""template/styles/widgets.min.css"">" + "\n";
            htmlTemplate1 += @" <link rel=""stylesheet"" type=""text/css"" href=""template/styles/topic.min.css"">" + "\n";
            htmlTemplate1 += @"<script type=""text/javascript"" >" + "\n";
            htmlTemplate1 += @"gRootRelPath = ""."";" + "\n";
            htmlTemplate1 += @"gCommonRootRelPath = ""."";" + "\n";
            htmlTemplate1 += @"gTopicId = ""♪"";" + "\n";
            htmlTemplate1 += @"refPage = {" + "\n";
            foreach (var item in title4Collection)
            {
                htmlTemplate1 += item.Key + ":['" + item.Value[0] + "','" + item.Value[1] + "'],";
            }
            //foreach (var item in headerCollection)
            //{
            //    htmlTemplate1 += item.Key + ":['" + item.Value[0] + "','" + item.Value[1] + "'],";
            //}
            htmlTemplate1 += @"};" + "\n";
            htmlTemplate1 += @"mergePage = {" + "\n";
            foreach (var item in mergeScript)
            {
                htmlTemplate1 += item.Value.Split(new char[] { '♯' })[0] + ":'" + item.Key.Split(new char[] { '♯' })[0] + "',";
            }

            htmlTemplate1 += @"};" + "\n";
            htmlTemplate1 += @"	 url = [];" + "\n";

            htmlTemplate1 += @"function areDirectoriesEqual(relativePath) {" + "\n";
            htmlTemplate1 += @"	if (!relativePath) return false;" + "\n";
            htmlTemplate1 += @"	if (!relativePath.match(""/"") || relativePath.match(/^\.\/.*/)) return true;" + "\n";
            htmlTemplate1 += @"	const currentUrl = window.location.href;" + "\n";
            htmlTemplate1 += @"	const currentDir = currentUrl.substring(0, currentUrl.lastIndexOf('/'));" + "\n";
            htmlTemplate1 += @"	const baseUrl = window.location.origin;" + "\n";
            htmlTemplate1 += @"	const resolvedUrl = new URL(relativePath, baseUrl).href;" + "\n";
            htmlTemplate1 += @"	const resolvedDir = resolvedUrl.substring(0, resolvedUrl.lastIndexOf('/'));" + "\n";
            htmlTemplate1 += @"	return currentDir === resolvedDir;" + "\n";
            htmlTemplate1 += @"}" + "\n";
            htmlTemplate1 += @"" + "\n";
            htmlTemplate1 += @"function checkFileName(path) {" + "\n";
            htmlTemplate1 += @"	const fileName = path.split('/').pop().split(/[?#]/)[0];" + "\n";
            htmlTemplate1 += @"	return fileName.match(/^[A-Z]{3}[0-9]{5}[.]html$/);" + "\n";
            htmlTemplate1 += @"}" + "\n";
            htmlTemplate1 += @"" + "\n";
            htmlTemplate1 += @"function changeFileNameWithHash(path) {" + "\n";
            htmlTemplate1 += @"	const parts = path.split('/');" + "\n";
            htmlTemplate1 += @"	const filePart = parts.pop();" + "\n";
            htmlTemplate1 += @"	const dirPart = parts.join('/');" + "\n";
            htmlTemplate1 += @"	return `${dirPart}/#t=${filePart}`;" + "\n";
            htmlTemplate1 += @"}" + "\n";

            htmlTemplate1 += @"$(function () {" + "\n";
            htmlTemplate1 += @"	refPage = Object.values (refPage).sort ((a, b) => b[1].length - a[1].length).reduce (" + "\n";
            htmlTemplate1 += @"	  (result, value) => {" + "\n";
            htmlTemplate1 += @"		// tìm key tương ứng với value" + "\n";
            htmlTemplate1 += @"		const key = Object.keys (refPage).find (k => refPage [k] === value);" + "\n";
            htmlTemplate1 += @"		result [key] = value;" + "\n";
            htmlTemplate1 += @"		return result;" + "\n";
            htmlTemplate1 += @"	  }," + "\n";
            htmlTemplate1 += @"	  {}" + "\n";
            htmlTemplate1 += @"	);" + "\n";
            htmlTemplate1 += @"	" + "\n";
            htmlTemplate1 += @"	let text = window.location.href;" + "\n";
            htmlTemplate1 += @"	if (text.match(""[/][A-Z]{3}[0-9]{5}[.]html"") != null) {" + "\n";
            htmlTemplate1 += @"		let id = text.match(""[/][A-Z]{3}[0-9]{5}[.]html"")[0].replace(""/"", """").replace("".html"", """");" + "\n";
            htmlTemplate1 += @"		// check id in mergePage" + "\n";
            htmlTemplate1 += @"		for (let key in mergePage) {" + "\n";
            htmlTemplate1 += @"			if(mergePage[key]==id){" + "\n";
            htmlTemplate1 += @"				var newid=findFirstPageInMerge(id);" + "\n";
            htmlTemplate1 += @"						let ref = window.location.href.split('.html#')[1];" + "\n";
            htmlTemplate1 += @"				if (ref === '' || ref === undefined) {" + "\n";
            htmlTemplate1 += @"					document.location.href = newid + "".html#"" + id;" + "\n";
            htmlTemplate1 += @"					} else {" + "\n";
            htmlTemplate1 += @"						document.location.href = newid + "".html#"" + ref;" + "\n";
            htmlTemplate1 += @"					}" + "\n";
            htmlTemplate1 += @"			}" + "\n";
            htmlTemplate1 += @"	}" + "\n";
            htmlTemplate1 += @"		loadNextPage(id)" + "\n";
            htmlTemplate1 += @"		if(url.length>0){" + "\n";
            htmlTemplate1 += @"		Promise.all(url.map(x => x.api))" + "\n";
            htmlTemplate1 += @"		.then(responses => responses.forEach(" + "\n";
            htmlTemplate1 += @"		(response, index) => {" + "\n";
            htmlTemplate1 += @"		var html = $(response).find(""div"").parent();" + "\n";
            htmlTemplate1 += @"			var di = $('body');" + "\n";
            htmlTemplate1 += @"				$(html).find(""div:first"").html(""<a id='"" + url[index].page + ""'></a>"");" + "\n";
            htmlTemplate1 += @"				$(html).find(""p.NoPageBreak"").attr(""class"", ""Heading2"");" + "\n";
            htmlTemplate1 += @"					di.append(html);" + "\n";
            htmlTemplate1 += @"		$("".ref"").each(function () {" + "\n";
            htmlTemplate1 += @"			var refname = $(this).attr(""name"");" + "\n";
            htmlTemplate1 += @"			$(""[name="" + refname + ""]"").each(function () {" + "\n";
            htmlTemplate1 += @"				$(this).append(""<a name='"" + refname + ""'>"");" + "\n";
            htmlTemplate1 += @"			})" + "\n";
            htmlTemplate1 += @"		});" + "\n";
            htmlTemplate1 += @"		$("".MJS_ref"").each(function(){" + "\n";
            htmlTemplate1 += @"             $(this).find('a').each(function () {" + "\n";
            htmlTemplate1 += @"        	    var name = $(this).attr(""name"");" + "\n";
            htmlTemplate1 += @"        	    if (name?.indexOf(""_ref"") > -1) {" + "\n";
            htmlTemplate1 += @"        	    } else {" + "\n";
            //htmlTemplate1 += @"        		    let currentUri = $(this).attr('href');" + "\n";
            htmlTemplate1 += @"        		        let currentUri = $(this).attr('href').replace(/^\.\//, '');" + "\n";
            htmlTemplate1 += @"" + "\n";
            htmlTemplate1 += @"        		        if (currentUri.match(/^https?:/)) {" + "\n";
            htmlTemplate1 += @"        		    	    // 外部リンク" + "\n";
            htmlTemplate1 += @"        		        } else if (currentUri.match(/^#[A-Z]{3}[0-9]{5}$/)) {" + "\n";
            htmlTemplate1 += @"        		    	    // 内部リンク" + "\n";
            htmlTemplate1 += @"        		        } else if (!areDirectoriesEqual(currentUri) && checkFileName(currentUri)) {" + "\n";
            htmlTemplate1 += @"        		    	    // 外部参照" + "\n";
            htmlTemplate1 += @"        		    	    $(this).attr('href', changeFileNameWithHash(currentUri));" + "\n";
            htmlTemplate1 += @"        		        } else " + "\n";
            htmlTemplate1 += @"" + "\n";

            htmlTemplate1 += @"        		    if (currentUri.split('.html#')[0] == currentUri.split('.html#')[1]) {" + "\n";
            htmlTemplate1 += @"        		        for (i = 0; i < Object.keys(refPage).length; i++) {" + "\n";
            htmlTemplate1 += @"        		            if (Object.keys(refPage)[i] == currentUri.split('.html#')[1]) {" + "\n";
            htmlTemplate1 += @"        		                var key = Object.keys(refPage)[i];" + "\n";
            htmlTemplate1 += @"        		                var expectUrl = refPage[key][0] + "".html#"" + currentUri.split("".html#"")[1];" + "\n";
            htmlTemplate1 += @"        		                $(this).attr('href', expectUrl);" + "\n";
            htmlTemplate1 += @"        		                break;" + "\n";
            htmlTemplate1 += @"        		            }" + "\n";
            htmlTemplate1 += @"        		        }" + "\n";
            htmlTemplate1 += @"        		      } else {" + "\n";
            htmlTemplate1 += @"        		    let subDestinationId = currentUri.split('.')[0];" + "\n";
            htmlTemplate1 += @"        		    let destinationId = currentUri.split('#')[1] == undefined ? subDestinationId : currentUri.split('#')[1];" + "\n";
            htmlTemplate1 += @"        		    let temp = mergePage;" + "\n";
            htmlTemplate1 += @"        		    for (i = 0; i < Object.keys(mergePage).length; i++) {" + "\n";
            htmlTemplate1 += @"        			    let startId = Object.keys(temp).find(key => temp[key] === subDestinationId);" + "\n";
            htmlTemplate1 += @"        				    if (startId == undefined) break;" + "\n";
            htmlTemplate1 += @"        				    subDestinationId = startId;" + "\n";
            htmlTemplate1 += @"        		    }" + "\n";
            htmlTemplate1 += @"        		    let href = """"" + "\n";
            htmlTemplate1 += @"        		    if (subDestinationId == destinationId && subDestinationId?.indexOf(""_Ref"") > -1) {" + "\n";
            htmlTemplate1 += @"        		    	for (i = 0; i < Object.keys(refPage).length; i++) {" + "\n";
            htmlTemplate1 += @"        		    		if (Object.keys(refPage)[i] == subDestinationId) {" + "\n";
            htmlTemplate1 += @"        		    			var key = Object.keys(refPage)[i];" + "\n";
            htmlTemplate1 += @"        		    			href = refPage[key][0] + "".html#"" + destinationId;" + "\n";
            htmlTemplate1 += @"        		    			break;" + "\n";
            htmlTemplate1 += @"        		    		}" + "\n";
            htmlTemplate1 += @"        		    	}" + "\n";
            htmlTemplate1 += @"        		    } else {" + "\n";
            htmlTemplate1 += @"        		    	href = subDestinationId + '.html#' + destinationId;" + "\n";
            htmlTemplate1 += @"        		    }" + "\n";
            htmlTemplate1 += @"        		    $(this).attr('href', href);" + "\n";
            htmlTemplate1 += @"        		    $(this).attr('onclick', ""anchorElement(href.split('#Ref')[0])"");" + "\n";

            htmlTemplate1 += @"        		   }" + "\n";
            htmlTemplate1 += @"        	    }" + "\n";
            htmlTemplate1 += @"         })" + "\n";
            htmlTemplate1 += @"             $(this).find('.ref').each(function () {" + "\n";
            htmlTemplate1 += @"        	    var name = $(this).attr(""name"");" + "\n";
            htmlTemplate1 += @"        	    if (name?.indexOf(""_ref"") > -1) {" + "\n";
            htmlTemplate1 += @"        		    name = name.replace(""_ref"", """");" + "\n";
            htmlTemplate1 += @"        		    for (let key in refPage) {" + "\n";
            htmlTemplate1 += @"        					if (key == name) {" + "\n";
            htmlTemplate1 += @"        						var replaceStr = refPage[key][1];" + "\n";
            htmlTemplate1 += @"        						if ($("".ref[name="" + key + ""]"").length > 0) {" + "\n";
            htmlTemplate1 += @"        							$(this).html($(this).html().replace(replaceStr, ""<a href='#"" + key + ""'>"" + replaceStr + ""</a>""));" + "\n";
            htmlTemplate1 += @"        						} else {" + "\n";
            htmlTemplate1 += @"        						    let expectUrl = findFirstPageInMerge(refPage[key][0]) + "".html#"" + key;" + "\n";
            htmlTemplate1 += @"        							$(this).attr(""href"", expectUrl)" + "\n";
            htmlTemplate1 += @"        						}" + "\n";
            htmlTemplate1 += @"        						break;" + "\n";
            htmlTemplate1 += @"        					}" + "\n";
            htmlTemplate1 += @"        		    }" + "\n";
            htmlTemplate1 += @"        	    }" + "\n";
            htmlTemplate1 += @"         });" + "\n";
            htmlTemplate1 += @"		    });" + "\n";
            htmlTemplate1 += @"		" + "\n";
            htmlTemplate1 += @"		if(text.indexOf(""#"")>0){" + "\n";
            htmlTemplate1 += @"			window.location.href=text;" + "\n";
            htmlTemplate1 += @"		}" + "\n";
            htmlTemplate1 += @"		var di = $('body');" + "\n";
            htmlTemplate1 += @"     di.html(""<div></div><main>"" + di.html() + ""</main>"");" + "\n";
            htmlTemplate1 += @"	}" + "\n";
            htmlTemplate1 += @"))" + "\n";
            htmlTemplate1 += @"		" + "\n";
            htmlTemplate1 += @"		}else{" + "\n";
            htmlTemplate1 += @"		$("".ref"").each(function () {" + "\n";
            htmlTemplate1 += @"			var refname = $(this).attr(""name"");" + "\n";
            htmlTemplate1 += @"			$(""[name="" + refname + ""]"").each(function () {" + "\n";
            htmlTemplate1 += @"				$(this).append(""<a name='"" + refname + ""'>"");" + "\n";
            htmlTemplate1 += @"			})" + "\n";
            htmlTemplate1 += @"		});" + "\n";
            htmlTemplate1 += @"		$("".MJS_ref"").each(function(){" + "\n";
            htmlTemplate1 += @"             $(this).find('a').each(function () {" + "\n";
            htmlTemplate1 += @"        	    var name = $(this).attr(""name"");" + "\n";
            htmlTemplate1 += @"        	    if (name?.indexOf(""_ref"") > -1) {" + "\n";
            htmlTemplate1 += @"        	    } else {" + "\n";
            //htmlTemplate1 += @"        		    let currentUri = $(this).attr('href');" + "\n";
            htmlTemplate1 += @"        		        let currentUri = $(this).attr('href').replace(/^\.\//, '');" + "\n";
            htmlTemplate1 += @"" + "\n";
            htmlTemplate1 += @"        		        if (currentUri.match(/^https?:/)) {" + "\n";
            htmlTemplate1 += @"        		        	// 外部リンク" + "\n";
            htmlTemplate1 += @"        		        } else if (currentUri.match(/^#[A-Z]{3}[0-9]{5}$/)) {" + "\n";
            htmlTemplate1 += @"        		        	// 内部リンク" + "\n";
            htmlTemplate1 += @"        		        } else if (!areDirectoriesEqual(currentUri) && checkFileName(currentUri)) {" + "\n";
            htmlTemplate1 += @"        		    	    // 外部参照" + "\n";
            htmlTemplate1 += @"        		    	    $(this).attr('href', changeFileNameWithHash(currentUri));" + "\n";
            htmlTemplate1 += @"        		        } else " + "\n";
            htmlTemplate1 += @"" + "\n";

            htmlTemplate1 += @"        		    if (currentUri.split('.html#')[0] == currentUri.split('.html#')[1]) {" + "\n";
            htmlTemplate1 += @"        		        for (i = 0; i < Object.keys(refPage).length; i++) {" + "\n";
            htmlTemplate1 += @"        		            if (Object.keys(refPage)[i] == currentUri.split('.html#')[1]) {" + "\n";
            htmlTemplate1 += @"        		                var key = Object.keys(refPage)[i];" + "\n";
            htmlTemplate1 += @"        		                var expectUrl = refPage[key][0] + "".html#"" + currentUri.split("".html#"")[1];" + "\n";
            htmlTemplate1 += @"        		                $(this).attr('href', expectUrl);" + "\n";
            htmlTemplate1 += @"        		                break;" + "\n";
            htmlTemplate1 += @"        		            }" + "\n";
            htmlTemplate1 += @"        		        }" + "\n";
            htmlTemplate1 += @"        		      } else {" + "\n";
            htmlTemplate1 += @"        		      if (currentUri?.indexOf(""."") > 0 || currentUri?.indexOf(""_Ref"") > -1) {" + "\n";
            htmlTemplate1 += @"        		    let subDestinationId = currentUri.split('.')[0];" + "\n";
            htmlTemplate1 += @"        		    let destinationId = currentUri.split('#')[1] == undefined ? subDestinationId : currentUri.split('#')[1];" + "\n";
            htmlTemplate1 += @"        		    let temp = mergePage;" + "\n";
            htmlTemplate1 += @"        		    for (i = 0; i < Object.keys(mergePage).length; i++) {" + "\n";
            htmlTemplate1 += @"        			    let startId = Object.keys(temp).find(key => temp[key] === subDestinationId);" + "\n";
            htmlTemplate1 += @"        				    if (startId == undefined) break;" + "\n";
            htmlTemplate1 += @"        				    subDestinationId = startId;" + "\n";
            htmlTemplate1 += @"        		    }" + "\n";
            htmlTemplate1 += @"        		    let href = """"" + "\n";
            htmlTemplate1 += @"        		    if (subDestinationId == destinationId && subDestinationId?.indexOf(""_Ref"") > -1) {" + "\n";
            htmlTemplate1 += @"        		    	for (i = 0; i < Object.keys(refPage).length; i++) {" + "\n";
            htmlTemplate1 += @"        		    		if (Object.keys(refPage)[i] == subDestinationId) {" + "\n";
            htmlTemplate1 += @"        		    			var key = Object.keys(refPage)[i];" + "\n";
            htmlTemplate1 += @"        		    			href = refPage[key][0] + "".html#"" + destinationId;" + "\n";
            htmlTemplate1 += @"        		    			break;" + "\n";
            htmlTemplate1 += @"        		    		}" + "\n";
            htmlTemplate1 += @"        		    	}" + "\n";
            htmlTemplate1 += @"        		    } else {" + "\n";
            htmlTemplate1 += @"        		    	href = subDestinationId + '.html#' + destinationId;" + "\n";
            htmlTemplate1 += @"        		    }" + "\n";
            htmlTemplate1 += @"        		    $(this).attr('href', href);" + "\n";
            htmlTemplate1 += @"        		    $(this).attr('onclick', ""anchorElement(href.split('#Ref')[0])"");" + "\n";
            htmlTemplate1 += @"        		   }" + "\n";
            htmlTemplate1 += @"        		   }" + "\n";
            htmlTemplate1 += @"        	    }" + "\n";
            htmlTemplate1 += @"         });" + "\n";
            htmlTemplate1 += @"             $(this).find('.ref').each(function () {" + "\n";
            htmlTemplate1 += @"        	    var name = $(this).attr(""name"");" + "\n";
            htmlTemplate1 += @"        	    if (name?.indexOf(""_ref"") > -1) {" + "\n";
            htmlTemplate1 += @"        		    name = name.replace(""_ref"", """");" + "\n";
            htmlTemplate1 += @"        		    for (let key in refPage) {" + "\n";
            htmlTemplate1 += @"        					if (key == name) {" + "\n";
            htmlTemplate1 += @"        						var replaceStr = refPage[key][1];" + "\n";
            htmlTemplate1 += @"        						if ($("".ref[name="" + key + ""]"").length > 0) {" + "\n";
            htmlTemplate1 += @"        							$(this).html($(this).html().replace(replaceStr, ""<a href='#"" + key + ""'>"" + replaceStr + ""</a>""));" + "\n";
            htmlTemplate1 += @"        						} else {" + "\n";
            htmlTemplate1 += @"        						    let expectUrl = findFirstPageInMerge(refPage[key][0]) + "".html#"" + key;" + "\n";
            htmlTemplate1 += @"        							$(this).attr(""href"", expectUrl);" + "\n";
            htmlTemplate1 += @"        						}" + "\n";
            htmlTemplate1 += @"        						break;" + "\n";
            htmlTemplate1 += @"        					}" + "\n";
            htmlTemplate1 += @"        		    }" + "\n";
            htmlTemplate1 += @"        	    }" + "\n";
            htmlTemplate1 += @"         });" + "\n";
            htmlTemplate1 += @"		    });" + "\n";
            htmlTemplate1 += @"		" + "\n";
            htmlTemplate1 += @"		" + "\n";
            htmlTemplate1 += @"		if(text.indexOf(""#"")>0){" + "\n";
            htmlTemplate1 += @"			window.location.href=text;" + "\n";
            htmlTemplate1 += @"		}" + "\n";
            htmlTemplate1 += @"		var di = $('body');" + "\n";
            htmlTemplate1 += @"     di.html(""<div></div><main>"" + di.html() + ""</main>"");" + "\n";
            htmlTemplate1 += @"		}" + "\n";
            htmlTemplate1 += @"		/*" + "\n";
            htmlTemplate1 += @"		$('a').each(function(){" + "\n";
            htmlTemplate1 += @"			if($(this).attr('href') !== undefined){" + "\n";
            htmlTemplate1 += @"				var test = $(this).attr('href').match(/[A-Z]{3}[0-9]{5}[.]html/);" + "\n";
            htmlTemplate1 += @"				if(test != null){" + "\n";
            htmlTemplate1 += @"					test = test[0].replace("".html"","""");" + "\n";
            htmlTemplate1 += @"					var lastPageInMerge = findFirstPageInMerge(test);" + "\n";
            htmlTemplate1 += @"					if(lastPageInMerge!=test){" + "\n";
            htmlTemplate1 += @"						$(this).attr('href',lastPageInMerge + "".html#"" + test);" + "\n";
            htmlTemplate1 += @"					}" + "\n";
            htmlTemplate1 += @"				}				" + "\n";
            htmlTemplate1 += @"			}" + "\n";
            htmlTemplate1 += @"		});*/" + "\n";

            htmlTemplate1 += @"	}" + "\n";
            htmlTemplate1 += @"});" + "\n";

            htmlTemplate1 += @"" + "\n";
            htmlTemplate1 += @"function findFirstPageInMerge(page){" + "\n";
            htmlTemplate1 += @"	var found=false;" + "\n";
            htmlTemplate1 += @"	for (let key in mergePage) {" + "\n";
            htmlTemplate1 += @"		if(mergePage[key]==page){" + "\n";
            htmlTemplate1 += @"			found = true;" + "\n";
            htmlTemplate1 += @"			return findFirstPageInMerge(key);" + "\n";
            htmlTemplate1 += @"			break;" + "\n";
            htmlTemplate1 += @"		}" + "\n";
            htmlTemplate1 += @"	}" + "\n";
            htmlTemplate1 += @"	if(!found){" + "\n";
            htmlTemplate1 += @"		return page;" + "\n";
            htmlTemplate1 += @"	}" + "\n";
            htmlTemplate1 += @"}" + "\n";
            htmlTemplate1 += @"" + "\n";
            htmlTemplate1 += @"function anchorElement(url) {" + "\n";
            htmlTemplate1 += @" if (window.location.href.indexOf("".html#"") > -1){" + "\n";
            htmlTemplate1 += @"     window.location.href = url;" + "\n";
            htmlTemplate1 += @" }" + "\n";
            htmlTemplate1 += @"}" + "\n";

            htmlTemplate1 += @"function loadNextPage(id) {" + "\n";
            htmlTemplate1 += @"	if (mergePage[id] !== undefined) {" + "\n";
            htmlTemplate1 += @"		url.push({" + "\n";
            htmlTemplate1 += @"			api: $.ajax({" + "\n";
            htmlTemplate1 += @"			url: mergePage[id] + "".html""" + "\n";
            htmlTemplate1 += @"				})," + "\n";
            htmlTemplate1 += @"			page:  mergePage[id]" + "\n";
            htmlTemplate1 += @"				});" + "\n";
            htmlTemplate1 += @"		loadNextPage(mergePage[id])" + "\n";
            htmlTemplate1 += @"	} " + "\n";
            htmlTemplate1 += @"}" + "\n";
            htmlTemplate1 += @"</script>" + "\n";
            htmlTemplate1 += @" <meta name=""topic-breadcrumbs"" content="""" />" + "\n";
            htmlTemplate1 += @"</head>" + "\n";
            htmlTemplate1 += @"<body style=""text-justify-trim: punctuation;"">" + "\n";
            return htmlTemplate1;
        }
    }
}
